name: 2. DNS Stack Build & Test

on:
  workflow_dispatch:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]
  merge_group:
    branches: [ main ]

concurrency:
  group: docker-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build for testing
      uses: docker/build-push-action@v5
      with:
        context: .
        load: true
        tags: dns-stack:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Set test scripts permissions
      run: |
        chmod +x tests/test_unbound.sh
        chmod +x tests/test_redis.sh
        chmod +x tests/test_adguard.sh
        ls -la tests/

    - name: Start test container
      run: |
        docker run -d --name dns-stack-test \
          -v ${{ github.workspace }}/tests:/tests:ro \
          dns-stack:test
        
        # Verify the mount
        echo "Verifying test files mount..."
        docker exec dns-stack-test ls -la /tests || {
          echo "Failed to list /tests directory"
          docker logs dns-stack-test
          exit 1
        }
        
        sleep 25  # Wait for services to start

    - name: Run tests
      run: |
        for test in unbound redis adguard; do
          echo "Running $test tests..."
          if ! docker exec dns-stack-test /tests/test_${test}.sh; then
            echo "Test $test failed"
            docker logs dns-stack-test
            exit 1
          fi
        done

    - name: Clean up
      if: always()
      run: docker rm -f dns-stack-test || true

  publish:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Generate tags
      id: tags
      run: |
        UNBOUND_VERSION=$(grep "ARG UNBOUND_VERSION=" Dockerfile | cut -d'"' -f2)
        ADGUARD_VERSION=$(grep "ARG ADGUARD_VERSION=" Dockerfile | cut -d'"' -f2)
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        VERSION_TAG="u${UNBOUND_VERSION}-a${ADGUARD_VERSION}"
        echo "build_tag=${VERSION_TAG}-${SHORT_SHA}" >> $GITHUB_OUTPUT

    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_DOCKER_NAME }}:latest
          ${{ secrets.DOCKERHUB_DOCKER_NAME }}:${{ steps.tags.outputs.build_tag }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
