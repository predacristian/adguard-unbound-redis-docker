name: 2. DNS Stack CI/CD

on:
  workflow_dispatch:
    inputs:
      unbound_version:
        description: 'Unbound version'
        required: false
      adguard_version:
        description: 'AdGuard version'
        required: false
  pull_request:
    branches: [ "main" ]
    paths-ignore:
      - 'README.md'
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  merge_group:
    branches: [ main ]

concurrency:
  group: docker-image-${{ github.run_id }}
  cancel-in-progress: true

jobs:
  wait-for-tests:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Wait for tests to succeed
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          check-name: 'build-and-test'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  check-changes:
    needs: [wait-for-tests]
    runs-on: ubuntu-latest
    outputs:
      files_changed: ${{ steps.check_files.outputs.changed }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for relevant file changes
      id: check_files
      run: |
        git diff --name-only HEAD^ HEAD > changed_files.txt
        echo "Changed files:"
        cat changed_files.txt
        
        if grep -qE '^(Dockerfile|config/|entrypoint\.sh|init-config\.sh)' changed_files.txt; then
          echo "changed=true" >> $GITHUB_OUTPUT
        else
          echo "changed=false" >> $GITHUB_OUTPUT
        fi

  check-versions:
    needs: [wait-for-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      unbound_version: ${{ env.UNBOUND_VERSION }}
      adguard_version: ${{ env.ADGUARD_VERSION }}
      build_needed: ${{ steps.check.outputs.build_needed }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Get Latest Versions
      id: versions
      run: |
        if [ -n "${{ github.event.inputs.unbound_version }}" ]; then
          UNBOUND_VERSION="${{ github.event.inputs.unbound_version }}"
        else
          UNBOUND_VERSION=$(curl -s https://nlnetlabs.nl/downloads/unbound/ | grep -oP 'unbound-\K[0-9]+\.[0-9]+\.[0-9]+(?=\.tar\.gz)' | sort -V | tail -n1)
        fi

        if [ -n "${{ github.event.inputs.adguard_version }}" ]; then
          ADGUARD_VERSION="${{ github.event.inputs.adguard_version }}"
        else
          ADGUARD_VERSION=$(curl -s https://api.github.com/repos/AdguardTeam/AdGuardHome/releases/latest | jq -r .tag_name)
        fi
        
        echo "unbound_version=${UNBOUND_VERSION}" >> $GITHUB_OUTPUT
        echo "adguard_version=${ADGUARD_VERSION}" >> $GITHUB_OUTPUT
        echo "UNBOUND_VERSION=${UNBOUND_VERSION}" >> $GITHUB_ENV
        echo "ADGUARD_VERSION=${ADGUARD_VERSION}" >> $GITHUB_ENV

    - name: Update Dockerfile Versions
      id: version_check
      run: |
        CURRENT_UNBOUND=$(grep "ARG UNBOUND_VERSION=" Dockerfile | cut -d'"' -f2)
        CURRENT_ADGUARD=$(grep "ARG ADGUARD_VERSION=" Dockerfile | cut -d'"' -f2)
        
        echo "CURRENT_UNBOUND=${CURRENT_UNBOUND}"
        echo "CURRENT_ADGUARD=${CURRENT_ADGUARD}"
        echo "New versions:"
        echo "UNBOUND_VERSION=${UNBOUND_VERSION}"
        echo "ADGUARD_VERSION=${ADGUARD_VERSION}"
        
        if [ "${CURRENT_UNBOUND}" = "${UNBOUND_VERSION}" ] && [ "${CURRENT_ADGUARD}" = "${ADGUARD_VERSION}" ]; then
          echo "versions_current=true" >> $GITHUB_OUTPUT
          echo "No updates needed, versions are current"
          exit 0
        fi
        
        sed -i.bak "s|ARG UNBOUND_VERSION=.*|ARG UNBOUND_VERSION=\"${UNBOUND_VERSION}\"|" Dockerfile
        sed -i.bak "s|ARG ADGUARD_VERSION=.*|ARG ADGUARD_VERSION=\"${ADGUARD_VERSION}\"|" Dockerfile
        rm -f Dockerfile.bak
        echo "versions_current=false" >> $GITHUB_OUTPUT
        echo "DOCKERFILE_UPDATED=true" >> $GITHUB_ENV

    - name: Commit and push if changed
      if: steps.version_check.outputs.versions_current == 'false'
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'
        git add Dockerfile
        git commit -m "chore: update Unbound to ${UNBOUND_VERSION} and AdGuard to ${ADGUARD_VERSION}"
        git push origin main

    - name: Set build needed flag
      id: check
      run: |
        if [ "${{ steps.version_check.outputs.versions_current }}" = "true" ]; then
          echo "build_needed=false" >> $GITHUB_OUTPUT
        else
          echo "build_needed=true" >> $GITHUB_OUTPUT
        fi

  build:
    needs: [wait-for-tests, check-versions, check-changes]
    if: >
      (needs.check-versions.outputs.build_needed == 'true' || needs.check-changes.outputs.files_changed == 'true')
      && github.event
